#!/usr/bin/env python

import sys
import os
from pathlib import Path

import signal
def CTRL_C_handler(sig, frame):
    print()
    sys.exit(1)

signal.signal(signal.SIGINT, CTRL_C_handler)


#############
# ANSI Colors
#############

# see:
#   https://opensource.com/article/19/9/linux-terminal-colors
BOLD_WHITE_RED_BG = "\x1b[01;37;41m"
BOLD_YELLOW_BG = "\x1b[01;33m"
GREEN = "\x1b[32m"
RED = "\x1b[31m"
END_COLOR = "\x1b[0m"


######
# Help
######

def help():
#                                                               max length --> |
    print("""\
Automatically add and remove .gitkeep files for tracking empty directories with
git.

Usage: gitkeep [OPTIONS] [DIRECTORY]

Notes:
By default DIRECTORY is the current working directory.
By default all directories starting with "." will be ignored.

Options:
  -a, --all    Include directories starting with ".".
  -d, --dry    Run in dry mode, i.e. only print the changes instead of
               performing them.
  -f, --force  Run the script even on possibly large directories.
  -h, --help   Display this help message.""")

def error(message="generic error."):
    help()
    print()
    print(f"{BOLD_WHITE_RED_BG}Error{END_COLOR} {message}")
    sys.exit(1)

def info(message):
    print(f"{BOLD_YELLOW_BG}Info{END_COLOR} {message}")

if ("-h" in sys.argv
    or "--help" in sys.argv):
    help()
    sys.exit(0)


#########
# Options
#########

# Default options
ignore_hidden = True
dry = False
force = False
rootdir = Path.cwd()

for option in sys.argv[1:]:
    if option in ["--all", "-a"]:
        ignore_hidden = False
    elif option in ["--dry", "-d"]:
        dry = True
    elif option in ["--force", "-f"]:
        force = True
    else:
        if Path(option).is_dir():
            rootdir = Path(option)
        else:
            error(f"Unrecognized option: '{option}'\n\"gitkeep --help\" gives more information.")

rootdir = rootdir.resolve()

if not force:
    # Ignore the force warning when running in dry mode.
    if not dry:
        if str(rootdir).count("/") <= 3:
            error(f"{rootdir} may be a large directory.\nUse -f or --force to run anyway.")


##################
# Helper functions
##################

def is_empty(d):
    return not any(d.iterdir())

def create_gitkeep(d):
    if not dry:
        open(str(d / ".gitkeep"), "a").close()

    print(f"{GREEN}+{(d / '.gitkeep').relative_to(rootdir)}{END_COLOR}")

def has_unnecessary_gitkeep(d):
    # If it has the .gitkeep file
    if (d / ".gitkeep").is_file():
        try:
            d_iterdir = d.iterdir()

            next(d_iterdir)
            next(d_iterdir)

            return True
        except StopIteration:
            return False

    return False

def remove_gitkeep(d):
    if not dry:
        os.remove(str(d / ".gitkeep"))

    print(f"{RED}-{(d / '.gitkeep').relative_to(rootdir)}{END_COLOR}")


##############
# Main program
##############

if dry:
    info("Running gitkeep in dry mode.")

# Queue of dirs to check.
dir_queue = [rootdir]

# Find all the empty dirs
# and also unnecessary .gitkeep files.
while len(dir_queue) > 0:
    d = dir_queue.pop()

    if ignore_hidden:
        if d.name.startswith("."):
            continue

    if is_empty(d):
        create_gitkeep(d)
    else:
        dir_queue += [f for f in d.iterdir() if f.is_dir()]

        if has_unnecessary_gitkeep(d):
            remove_gitkeep(d)
